package com.example.tiosimport PdfViewerScreenimport android.annotation.SuppressLintimport android.net.Uriimport android.os.Buildimport android.os.Bundleimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.activity.enableEdgeToEdgeimport androidx.compose.foundation.Imageimport androidx.compose.foundation.layout.*import androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material3.*import androidx.compose.runtime.*import androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.navigation.NavControllerimport androidx.navigation.compose.NavHostimport androidx.navigation.compose.composableimport androidx.navigation.compose.rememberNavControllerimport com.example.tios.ui.theme.TIOSThemeimport com.google.firebase.FirebaseAppimport com.google.firebase.firestore.Queryimport com.google.firebase.firestore.firestoreimport com.google.firebase.messaging.FirebaseMessagingimport androidx.core.app.NotificationCompatimport androidx.core.app.NotificationManagerCompatimport android.app.NotificationChannelimport android.app.NotificationManagerimport android.content.pm.PackageManagerimport android.Manifestimport android.util.Logimport androidx.compose.ui.graphics.Colorclass MainActivity : ComponentActivity() {    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        enableEdgeToEdge()        FirebaseApp.initializeApp(this)        // ✅ Ask for notification permission on Android 13+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {            if (checkSelfPermission(Manifest.permission.POST_NOTIFICATIONS) != PackageManager.PERMISSION_GRANTED) {                requestPermissions(arrayOf(Manifest.permission.POST_NOTIFICATIONS), 1)            }        }        // ✅ Listen for new notifications in Firestore        com.google.firebase.Firebase.firestore.collection("notifications")            .orderBy("timestamp", Query.Direction.DESCENDING)            .limit(1)            .addSnapshotListener { snapshot, e ->                if (e != null || snapshot == null || snapshot.isEmpty) return@addSnapshotListener                val doc = snapshot.documents[0]                val title = doc.getString("title") ?: "New Notification"                val body = doc.getString("body") ?: ""                showLocalNotification(this, title, body)            }        setContent {            TIOSTheme {                val navController = rememberNavController()                NavHost(navController, startDestination = "main") {                    composable("main") { MainScreen(navController) }                    composable("class_Selection") { classSelection(navController) }                    composable("admin_login") { adminscreen(navController) }                    composable("admin_upload") { AdminUploadScreen() }                    composable("student_docs") { StudentDocsScreen(navController) }                    composable("subjects_11") { subject11(navController) }                    composable("subject12") { subject12(navController) }                    composable("class11_physics") { physics(navController) }                    composable("class11_chemistry") { chemistry(navController) }                    composable("class11_maths") { maths(navController) }                    composable("class11_biology") { biology(navController) }                    composable("physics12") { physics12(navController) }                    composable("chemistry12") { chemistry12(navController) }                    composable("maths12") { maths12(navController) }                    composable("biology12") { biology12(navController) }                    composable("pdfViewer/{url}") { backStackEntry ->                        val encodedUrl = backStackEntry.arguments?.getString("url")                        val url = Uri.decode(encodedUrl)                        PdfViewerScreen(url)                    }                }            }        }        // Just to see your token in logs        FirebaseMessaging.getInstance().token.addOnCompleteListener { task ->            if (task.isSuccessful) {                val token = task.result                Log.d("FCM", "Token: $token")            }        }    }    // Local Notification Function    private fun showLocalNotification(context: android.content.Context, title: String, message: String) {        val channelId = "updates_channel"        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            val channel = NotificationChannel(                channelId, "Updates", NotificationManager.IMPORTANCE_HIGH            )            context.getSystemService(NotificationManager::class.java)                ?.createNotificationChannel(channel)        }        val notification = NotificationCompat.Builder(context, channelId)            .setSmallIcon(R.drawable.ic_launcher_foreground)            .setContentTitle(title)            .setContentText(message)            .setPriority(NotificationCompat.PRIORITY_HIGH)            .build()        try {            NotificationManagerCompat.from(context).notify(1, notification)        } catch (e: SecurityException) {            Log.e("Notifications", "Permission not granted to show notifications")        }    }}@SuppressLint("UnusedBoxWithConstraintsScope")@Composablefun MainScreen(navController: NavController) {    val buttonColor = ButtonDefaults.buttonColors(containerColor = Color(0xFF006400))    BoxWithConstraints(        modifier = Modifier            .fillMaxSize()    ) {        val screenWidth = maxWidth        val screenHeight = maxHeight        Box(            modifier = Modifier.fillMaxSize(),            contentAlignment = Alignment.Center // This centers the content        ) {            Image(                painter = painterResource(id = R.drawable.logo), // replace with your image                contentDescription = null,                modifier = Modifier.size(400.dp), // adjust size as needed                contentScale = ContentScale.Fit,                /*   colorFilter = ColorFilter.tint(                       Color.White.copy(alpha = 0.7f), // 0.0 = fully transparent, 1.0 = fully white                       blendMode = BlendMode.SrcAtop*/            )        }        // Foreground content        Column(            modifier = Modifier                .fillMaxSize()                .padding(top = 40.dp, start = 16.dp, end = 16.dp),        ) {            // Logo Row            Row(                verticalAlignment = Alignment.CenterVertically            ) {                Image(                    painter = painterResource(id = R.drawable.logo),                    contentDescription = null,                    contentScale = ContentScale.Crop,                    modifier = Modifier                        .size(105.dp)                        .aspectRatio(1f)                )                Spacer(modifier = Modifier.width(16.dp))                Text(                    text = "Technical Institute of Science and Technology ",                    fontSize = 19.sp                )            }            Spacer(modifier = Modifier.weight(1f))            // Center Buttons            Box(                modifier = Modifier                    .fillMaxSize()            ) {                // Background Image                // Fixed position for buttons                Row(                    horizontalArrangement = Arrangement.spacedBy(20.dp),                    modifier = Modifier                        .align(Alignment.BottomCenter) // Fixed at bottom center                        .padding(bottom = 80.dp) // Distance from bottom                ) {                    Button(                        onClick = { navController.navigate("admin_login") },                        colors = buttonColor,                        shape = RoundedCornerShape(15.dp)                    ) {                        Text("Admin", color = Color.White)                    }                    Button(                        onClick = { navController.navigate("class_Selection") },                        colors = buttonColor,                        shape = RoundedCornerShape(15.dp)                    ) {                        Text("Student", color = Color.White)                    }                }            }        }    }}